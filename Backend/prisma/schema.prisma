generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  phone            String?
  password         String
  role             String // e.g., "admin", "customer"
  orders           Order[] // Relation to Order
  verificationCode String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  categoryId  Int
  price       Float
  description String?
  benefits    String?
  isLatest    Boolean  @default(false)
  status      String // e.g., "active", "inactive"
  imageUrls   String   @db.VarChar(500) // Store JSON string of image URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  orderProducts OrderProduct[] // Relation to OrderProduct
  expenses      Expense[]
  cartItems     CartItem[] // Relation to CartItem
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  status    String    @default("active") // "active" or "inactive"
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int // Associate with a user
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int  @id @default(autoincrement())
  cartId    Int
  productId Int?
  giftId    Int? // Optional field for Gift relation
  quantity  Int  @default(1)

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  customerName    String
  customerEmail   String
  customerPhone   String
  shippingAddress String
  paymentMethod   String
  total           Float
  orderDate       DateTime @default(now())
  status          String // e.g., "pending", "completed", "canceled"
  message         String?
  sender          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  orderProducts OrderProduct[] // Relation to OrderProduct
  
  
}

model OrderProduct {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}



model Employer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String
  position    String?
  department  String?
  startDate   DateTime?
  salary      Float
  status      String    @default("active")
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id          Int      @id @default(autoincrement())
  title       String
  category    String
  amount      Float
  date        DateTime
  description String?
  productId   Int? // Optional relation to Product
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id])
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

// prisma/schema.prisma

model NewsletterLog {
  id             String   @id @default(cuid())
  subject        String
  content        String   @db.Text
  recipientCount Int
  sentAt         DateTime
}
